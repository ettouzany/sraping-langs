{
    "lectures": [
        {
            "title": "Hello, World!",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "<hr/><p>C# is a static programming language which lets us write code that runs atop Microsoft's .NET framework.\nC# has more features and capabilities than Java, but since it is owned by Microsoft, it means that\nyou may find yourself paying money for your IDE, server operating system, etc.</p><p>C# is object oriented and its syntax is very similar to Java.</p><p>In our tutorial, we will be using the <code>System.Console.WriteLine</code> function to write lines to the output\nconsole. When writing a C# command line application, the same function can also be used to print to the\nconsole.</p><p><strong>Note:</strong> Writing web applications using C# is possible using the ASP.NET framework.</p>"
                }
            ]
        },
        {
            "title": "User Input",
            "parts": [
                {
                    "title": "Tutorial",
                    "html": "<p>To communicate with your CPU, the CPU outputs text on your monitor and asks for user input.\n<code>Console</code> has a function called <code>ReadLine()</code> which tells the OS Kernel to ask for user input.</p><pre><code>using System;\npublic class Input\n{\n    public static void Main()\n    {\n        Console.ReadLine();\n    }\n}\n</code></pre><p>When you run this script, you can write on the console. When you press Enter then the console will close.</p><pre><code>using System;\n\npublic class Input\n{\n    public static void Main()\n    {\n        Console.WriteLine(Console.ReadLine());\n    }\n}\n</code></pre><p>This will print your input to the console.</p>"
                }
            ]
        },
        {
            "title": "Variables and Types",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "<hr/><p>C# is a statically-typed language. Therefore, we must define the types of variables before using them.</p><p>To define a variable in C#, we use the following syntax, which is similar to C / Java:</p><pre><code>int myInt = 1;\nfloat myFloat = 1f;\nbool myBoolean = true;\nstring myName = \"John\";\nchar myChar = 'a';\ndouble myDouble = 1.75;\n</code></pre><p>Notice that defining a floating point number requires an explicit <code>f</code> letter after the number.</p><p>C# supports type inference - which means that you don't always have to explicitly specify a type - you\ncan let the compiler try and understand the type of variable automatically. However, once the type of variable\nhas been determined, it cannot be assigned a different type.</p><pre><code>var x = 1;\nvar y = 2;\nvar sum = x + y;    // sum will also be defined as an integer\n</code></pre>"
                },
                {
                    "title": "Enums",
                    "html": "<p>Enums are integers that should be used when an integer is used to specify an option from a fixed amount of options.</p><pre><code>public enum CarType\n{\n    Toyota = 1,\n    Honda = 2,\n    Ford = 3,\n}\n\npublic class Tutorial\n{\n    public static void Main()\n    {\n        CarType myCarType = CarType.Toyota;\n    }\n}\n</code></pre>"
                }
            ]
        },
        {
            "title": "Type Conversion",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "<hr/><p>C# types are not the same! In some cases you have to convert a value's type.</p>"
                },
                {
                    "title": "Automatically",
                    "html": "<p>Usually C# functions convert argument's value type automatically.\nThere you don't have to do anything.</p>"
                },
                {
                    "title": "Manually",
                    "html": "<p>Sometimes C# function don't convert value types. Here, you have to do it manually.\nThere are two methods:</p><ul>\n<li>By reassigning the value to a new variable: <code>int myVar = (int) 1.0;</code></li>\n<li>By using methods: <code>string myVar = Convert.ToString(10);</code>\nNote: <code>Convert</code> uses the <code>ToInt32</code> for int conversion.</li>\n</ul>"
                }
            ]
        },
        {
            "title": "Conditionals",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "<hr/><p>C# uses Boolean variables to evaluate conditions. The Boolean values <code>true</code> and <code>false</code> are returned when an expression is compared or evaluated.\nFor example:</p><pre><code>int a = 4;\nbool b = a == 4;\n\nif (b) {\n    Console.WriteLine(\"It's true!\");\n}\n</code></pre><p>Of course we don't normally assign a conditional expression to a bool, we just use the short version:</p><pre><code>int a = 4;\n\nif (a == 4) {\n    Console.WriteLine(\"Ohhh! So a is 4!\");\n}\n</code></pre>"
                },
                {
                    "title": "Boolean operators",
                    "html": "<p>There aren't that many operators to use in conditional statements and most of them are pretty straight forward:</p><pre><code>int a = 4;\nint b = 5;\nbool result;\nresult = a &lt; b; // true\nresult = a &gt; b; // false\nresult = a &lt;= 4; // a smaller or equal to 4 - true\nresult = b &gt;= 6; // b bigger or equal to 6 - false\nresult = a == b; // a equal to b - false\nresult = a != b; // a is not equal to b - true\nresult = a &gt; b || a &lt; b; // Logical or - true\nresult = 3 &lt; a &amp;&amp; a &lt; 6; // Logical and - true\nresult = !result; // Logical not - false\n</code></pre>"
                },
                {
                    "title": "if - else and between",
                    "html": "<p>The if, else statement in C# is pretty simple.</p><pre><code>if (a == b) {\n    // a and b are equal, let's do something cool\n}\n</code></pre><p>And we can also add an else statement after an if, to do something if the condition is not true</p><pre><code>if (a == b) {\n    // We already know this part\n} else {\n    // a and b are not equal... :/\n}\n</code></pre><p>The if - else statements doesn't have to be in several lines with {}, if can be used in one line, or without the {}, for a single line statment.</p><pre><code>if (a == b)\n    Console.WriteLine(\"Another line Wow!\");\nelse\n    Console.WriteLine(\"Double rainbow!\");\n</code></pre><p>Although this method might be useful for making your code shorter by using fewer lines, we strongly recommend for beginners not to use this short version of statements and always use the full version with {}. This goes to every statement that can be shorted to a single line (for, while, etc).</p>"
                }
            ]
        },
        {
            "title": "Arrays",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "<hr/><p>Arrays in C# are very similar to arrays in C. They are defined using the brackets operator <code>[]</code>, and\nthey are initialized using a list defined with curly braces. For example:</p><pre><code>int[] nums = { 1, 2, 3, 4, 5 };\n</code></pre><p>We can also define an empty array like this:</p><pre><code>int[] nums = new int[10];\n</code></pre><p>To get the size of the array, use the <code>Length</code> method.</p><pre><code>int[] nums = new int[10];\nConsole.WriteLine(nums.Length);\n</code></pre><p>To access a specific item in the array, we use the brackets operator:</p><pre><code>int[] nums = new int[10];\nint firstNumber = nums[0];\nint secondNumber = nums[1];\nnums[2] = 10;\n</code></pre><p>Notice that C# uses zero based indices.</p>"
                },
                {
                    "title": "Multidimensional arrays",
                    "html": "<p>C# supports multidimensional arrays, defined in the following manner:</p><pre><code>int[,] matrix = new int[2,2];\n\nmatrix[0,0] = 1;\nmatrix[0,1] = 2;\nmatrix[1,0] = 3;\nmatrix[1,1] = 4;\n\nint[,] predefinedMatrix = new int[2,2] { { 1, 2 }, { 3, 4 } };\n</code></pre>"
                },
                {
                    "title": "Jagged arrays",
                    "html": "<p>These are multidimensional arrays where each subarray is an independent array - Can have subarrays of different lengths.\nUse a separate set of square brackets for each dimension of the array.</p><h5>jagArray1[2][7][4] // Three sets of square brackets</h5><p>Unlike other types of arrays, you cannot fully instantiate a jagged array in a single step. Since a jagged array is an array of independent arrays, each array must be created separately.</p><p>Instantiating a full jagged array requires the following steps: </p><p>##### 1. Instantiate the top-level array.\n ##### 2. Instantiate each subarray separately, assigning the reference of the newly created array to the appropriate element of its containing array.</p><p>For example, the following code shows the declaration, instantiation, and initialization of a twodimensional jagged array. Notice in the code that the reference to each subarray is assigned to an \nelement in the top-level array.\n<code>int[][] Arr = new int[3][]; \nArr[0] = new int[] {10, 20, 30};\nArr[1] = new int[] {40, 50, 60, 70}; \nArr[2] = new int[] {80, 90, 100, 110, 120};</code></p>"
                }
            ]
        },
        {
            "title": "Lists",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "<hr/><p>Lists in C# are very similar to lists in Java. A list is an object which holds variables in a specific order.\nThe type of variable that the list can store is defined using the generic syntax. Here is an example of\ndefining a list called <code>numbers</code> which holds integers.</p><pre><code>List&lt;int&gt; numbers = new List&lt;int&gt;();\n</code></pre><p>The difference between a list and an array is that lists are dynamic sized, while arrays have a fixed size. When\nyou do not know the amount of variables your array should hold, use a list instead.</p><p>Once the list is initialized, we can begin inserting numbers into the list.</p><pre><code>List&lt;int&gt; numbers = new List&lt;int&gt;();\nnumbers.Add(1);\nnumbers.Add(2);\nnumbers.Add(3);\n</code></pre><p>We can also add a whole array to a list using the <code>AddRange</code> function:</p><pre><code>List&lt;int&gt; numbers = new List&lt;int&gt;();\nint[] array = new int[] { 1, 2, 3 };\nnumbers.AddRange(array);\n</code></pre>"
                },
                {
                    "title": "Removing from a list",
                    "html": "<p>We can use <code>Remove</code> to remove an item from a list by specifying the item we want to remove.</p><pre><code>List&lt;string&gt; fruits = new List&lt;string&gt;();\n// add fruits\nfruits.Add(\"apple\");\nfruits.Add(\"banana\");\nfruits.Add(\"orange\");\n\n// now remove the banana\nfruits.Remove(\"banana\");\nConsole.WriteLine(fruits.Count);\n</code></pre><p>We can also use <code>RemoveAt</code> to specify an index of an item to remove. In our case, to remove\nthe banana, we will use the index 1.</p><pre><code>List&lt;string&gt; fruits = new List&lt;string&gt;();\n// add fruits\nfruits.Add(\"apple\");\nfruits.Add(\"banana\");\nfruits.Add(\"orange\");\n\n// now remove the banana\nfruits.RemoveAt(1);\nConsole.WriteLine(fruits.Count);\n</code></pre>"
                },
                {
                    "title": "Concatenating lists",
                    "html": "<p>We can use <code>AddRange</code> to join between lists.</p><pre><code>List&lt;string&gt; food = new List&lt;string&gt;();\nfood.Add(\"apple\");\nfood.Add(\"banana\");\n\nList&lt;string&gt; vegetables = new List&lt;string&gt;();\nvegetables.Add(\"tomato\");\nvegetables.Add(\"carrot\");\n\nfood.AddRange(vegetables);\nConsole.WriteLine(food.Count);\n</code></pre>"
                }
            ]
        },
        {
            "title": "Dictionaries",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "<hr/><p>Dictionaries are special lists, whereas every value in the list has a key which is also a variable. A good example\nfor a dictionary is a phone book.</p><pre><code>Dictionary&lt;string, long&gt; phonebook = new Dictionary&lt;string, long&gt;();\nphonebook.Add(\"Alex\", 4154346543);\nphonebook[\"Jessica\"] = 4159484588;\n</code></pre><p>Notice that when defining a dictionary, we need to provide a generic definition with two types - the type of\nthe key and the type of the value. In this case, the key is a string whereas the value is an integer.</p><p>There are also two ways of adding a single value to the dictionary, either using the brackets operator\nor using the <code>Add</code> method.</p><p>To check whether a dictionary has a certain key in it, we can use the <code>ContainsKey</code> method:</p><pre><code>Dictionary&lt;string, long&gt; phonebook = new Dictionary&lt;string, long&gt;();\nphonebook.Add(\"Alex\", 415434543);\nphonebook[\"Jessica\"] = 415984588;\n\nif (phonebook.ContainsKey(\"Alex\"))\n{\n    Console.WriteLine(\"Alex's number is \" + phonebook[\"Alex\"]);\n}\n</code></pre><p>To remove an item from a dictionary, we can use the <code>Remove</code> method. Removing an item from\na dictionary by its key is fast and very efficient. When removing an item from a <code>List</code> using its value,\nthe process is slow and inefficient, unlike the dictionary <code>Remove</code> function.</p><pre><code>Dictionary&lt;string, long&gt; phonebook = new Dictionary&lt;string, long&gt;();\nphonebook.Add(\"Alex\", 415434543);\nphonebook[\"Jessica\"] = 415984588;\n\nphonebook.Remove(\"Jessica\");\nConsole.WriteLine(phonebook.Count);\n</code></pre>"
                }
            ]
        },
        {
            "title": "Strings",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "<hr/><p>To define a string, use quotes:</p><pre><code>string myString = \"A string.\";\n</code></pre><p>We can also use a Java object approach to create a string. In C#, a <code>string</code> is an alias for the <code>String</code> object.</p><pre><code>String myString = \"A string.\";\n</code></pre><p>To create an empty string, we can either define an empty string or use <code>String.Empty</code>, which is preferred.</p><pre><code>string emptyString = String.Empty;\nstring anotherEmptyString = \"\";\n</code></pre><p>To concatenate between strings, use the plus operator:</p><pre><code>string firstName = \"Eric\";\nstring lastName = \"Smith\";\nstring fullName = firstName + \" \" + lastName;\n</code></pre><p>To add one string to another, use the <code>+=</code> operator:</p><pre><code>string sentence = \"I like to play \";\nsentence += \"chess.\";\nConsole.WriteLine(sentence);\n</code></pre>"
                },
                {
                    "title": "ToString function",
                    "html": "<p>To cast a non-string object into a string, use the built in 'object.ToString()' function. Casting with '(string)' will only work on objects that are already strings, so the ToString function is necessary when turning something like an int into a string.</p><pre><code>int integer = 1;\nstring ourString = \"Something to be replaced by an int\";\nourString = integer.ToString();\nSystem.Console.WriteLine(ourString);\n</code></pre>"
                },
                {
                    "title": "String formatting",
                    "html": "<p>To format a string, use the <code>String.Format</code> function. Each additional argument to the function\ncan be referred to in the string using the brackets operator with the index number. For example,\n<code>{1}</code> refers to the second argument provided for the format function.</p><pre><code>int x = 1, y = 2;\nint sum = x + y;\nstring sumCalculation = String.Format(\"{0} + {1} = {2}\", x, y, sum);\nConsole.WriteLine(sumCalculation);\n</code></pre>"
                },
                {
                    "title": "Substring",
                    "html": "<p>The <code>Substring</code> string method returns a part of the string, beginning from the index\nspecified as the argument. Substring also accepts a maximum length for the substring.</p><pre><code>string fullString = \"full string\";\nstring partOfString = fullString.Substring(5);\nstring shorterPart = fullString.Substring(5, 3);\nConsole.WriteLine(partOfString);\nConsole.WriteLine(shorterPart);\n</code></pre>"
                },
                {
                    "title": "Search and replace",
                    "html": "<p>The <code>Replace</code> string method replaces an occurrence of a string with another string.</p><pre><code>string name = \"John Doe\";\nstring newName = name.Replace(\"John\", \"Eric\");\nConsole.WriteLine(newName);\n</code></pre>"
                },
                {
                    "title": "Index of",
                    "html": "<p>The <code>IndexOf</code> string method finds the first occurrence of a string in a larger string. If\nthe string is not found, -1 is returned.</p><pre><code>string fruit = \"apple,orange,banana\";\nConsole.WriteLine(\"Found orange in position: \" + fruit.IndexOf(\"orange\"));\nConsole.WriteLine(\"Found lemon in position: \" + fruit.IndexOf(\"lemon\"));\n</code></pre>"
                }
            ]
        },
        {
            "title": "For loops",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "<hr/><p>For loops are very similar to for loops in C, They are defined like this:</p><pre><code>for( [variable to count iterations] ; [conditions checked for] ; [code to execute every loop])\n{\n\n}\n</code></pre><p>E.G:</p><pre><code>int i;\n\nfor( i = 0; i &lt; 10; i++)\n{\n\n}\n</code></pre><p>This would loop until i is no longer less than ten, increasing i by one each time.\nHowever unlike C, C# does allow you to declare the variable you are using as to count iterations in the for loop:</p><pre><code>for( int i = 0; i &lt; 10; i++)\n</code></pre><p>For loops are used to allow you to repeat sections of code a fixed, or variable amount of times.\nThis allows you to make your code more compact and clean.</p><p>There are several statements you can use to control a loop:</p><pre><code>break;\n</code></pre><p>This allows you to exit a loop without finishing the loop.</p><p>E.G</p><pre><code>for(int i = 0; i &lt; 16; i++)\n{\n\n    if(i == 12)\n    {\n        break;    \n    }\n}\n</code></pre><p>Exit the loop when i is 12, not when the loop would usually finish</p><pre><code>continue;\n</code></pre><p>This allows you to skip straight to the next iteration</p><pre><code>for(int i = 0; i &lt; 16; i++)\n{\n\n    if(i % 2 == 1)\n    {\n        continue;\n    }\n\n    Console.WriteLine(i);\n\n}\n</code></pre><p>Print only the even numbers by skipping the interactions where i is odd.</p>"
                }
            ]
        },
        {
            "title": "Foreach loops",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "<hr/><p>A Foreach loop is used for getting items from an array. That makes this process so easier than using a for loop.</p><p>Foreach loops are defined like this:</p><pre><code>foreach (type variable in array)\n{\n  //Code\n}\n</code></pre><p>The loop will get the <code>array</code> length and loop through the elements of <code>array</code>.</p><p>Example:</p><pre><code>string[] programming = {\"C++\", \"C#\", \"CPython\", \"C\", \"Java\", \"JavaScript\"}; //An array\n\nforeach (string language in programming)\n{\n   Console.WriteLine(language);\n}\n</code></pre><p>This will output every item in <code>programming</code>.</p>"
                }
            ]
        },
        {
            "title": "While loops",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "<hr/><p>While loops are very similar to For loops, They are defined like this:</p><pre><code>while([conditions to be checked])\n{\n[Code to execute]\n}\n</code></pre><p>This allows you to continuously repeat a section of code while a condition is satisfied.</p><p>E.G:</p><pre><code>int n = 0;\n\nwhile( n == 0)\n{\n    Console.WriteLine(\"N is 0\");\n    n++;\n}\n</code></pre><p>This would execute once as N is changed from zero the first time it runs.\nUnlike for loops, while loops do not allow you to declare or assign the variable used in the conditions.</p><p>The same control statements (break and continue) as are used in for loops can also be used in while loops.</p>"
                }
            ]
        },
        {
            "title": "Methods",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "<hr/><p>Methods in C# are portions of a larger program that perform specific tasks. They can be used to keep code clean by separating it into separate pieces. They can also be used in more than one place allowing you to reuse previous code.</p><p>In C# methods can be in the main program or can be in libraries, which are external files, containing classes and subroutines which can be imported into a program. This allows them to be distributed easily and used by multiple programs.</p><p>Methods in C# are defined like this:</p><pre><code>[Modifiers (E.G public or static)] [Type of output] [Name] ( [parameter 1],[parameter 2] ...)\n{\n\n}\n</code></pre><p>E.G:</p><pre><code>public static int Multiply(int a, int b)\n{\n\n    return a * b;\n\n}\n</code></pre><p>This method has been passed two parameters, integer a and integer b, this is how you provide input for a subroutine (method). </p><p>The return statement stops the subroutine and (depending on the output type) can output a value of the same type as the output type you put at the top E.G:</p><pre><code>//int is the output type\n\nint Foo()\n{\n\n    //So you return an integer\n    return 0;\n\n}\n</code></pre><p>That is how you can receive output from a subroutine.\nBut in some cases you do not need to return a value, for instance:</p><pre><code>void Foo()\n{\n\n    //the output type is void, so you don't return a value\n    return;\n\n}\n</code></pre><p>In this case the return statement simply stops the subroutine and does not give any output, so if you assigned a variable to the output of a void, the variables value would be null, E.G:</p><pre><code>public static int Main(string[] args)\n{\n\n    // a = null\n    int a = Foo();\n\n}\n\nvoid Foo()\n{\n\n    return;\n\n}\n</code></pre>"
                }
            ]
        },
        {
            "title": "Basic Classes",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "<hr/><p>In C#, everything is an object, made from a class. Classes are defined with curly brackets, like this:</p><pre><code>class myClass{\n}\n</code></pre><p>The above example is a very basic class definition, containing no fields, properties, or methods. Now, we have a class, but how do we use it?\nThe answer is create an instance of that class. You can do this with the <code>new</code> keyword, like this:</p><pre><code>class myClass{\n}\nclass MainClass{\n  public static void Main(){\n    myClass myObject = new myClass();\n  }\n}\n</code></pre><p>Now, the class doesn't do anything, so why use it? Next, we will give the class a field like this:</p><pre><code>using System;\nclass myClass{\n  public string test = \"This works!\";\n}\nclass MainClass{\n  public static void Main(){\n    myClass myObject = new myClass();\n    Console.WriteLine(myObject.test);\n  }\n}\n</code></pre><p>The above code will print \"This works!\" to the screen. First, in <code>myClass</code>, we declare a string variable named \"test\" with the <code>public</code> modifier.\nUntil you learn more advanced programming, you will have to use to <code>public</code> modifier in separate classes. Then we make an instance of <code>myClass</code>.\nFinally, we write out the value of <code>test</code> using the dot operator on the instance of <code>myClass</code>.</p>"
                },
                {
                    "title": "Partial Classes and Partial Types:",
                    "html": "<pre><code> The declaration of a class can be partitioned among several partial class declarations.\n</code></pre><p>\u2022 Each of the partial class declarations contains the declarations of some of the class members. </p><p>\u2022 The partial class declarations of a class can be in the same file or in different files. Each partial declaration must be labeled as partial class, in contrast to the single keyword class.</p><p>The declaration of a partial class looks the same as the declaration of a normal class, other than the addition of the type modifier partial.</p><pre><code>    partial class MyPartialClass {\n\n         int w  // member1 declaration\n         int x  // member2 declaration\n    }\n    partial class MyPartialClass {\n\n         int y  // member1 declaration\n         int z  // member2 declaration\n    }\n</code></pre>"
                }
            ]
        },
        {
            "title": "Class Variables",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "<hr/><p>Building off of what we learned about basic classes, we can start working with class variables or fields. We know we create an instance of a class using:</p><pre><code>myClass myObject = new myClass();\n</code></pre><p>Additionally we know these objects have fields or member variables defined like so:</p><pre><code>class Shape{\n  public string Type = \"square\";\n  public int Sides = 4;\n  public int Sidelength = 1;\n  public double Area = 1;\n}\n</code></pre><p>The above code defines a class named Shape with 4 different fields. In this case our shape is a square with 4 sides of length 1 and an area of 1. What if we wanted a triangle instead of a square? We can do that by allowing our class to accept different values for its fields. Because we will be defining the values of the fields later, we don't have to assign them here. We give Shape fields without values like this:</p><pre><code>class Shape{\n  public string Type;\n  public int Sides;\n  public int Sidelength;\n  public double Area;  \n}\n</code></pre><p>Now to give those fields values we need to define something called a constructor in our class. Constructors use the same name of their class. Adding an empty constructor, our class looks like this:</p><pre><code>class Shape{\n  public string Type;\n  public int Sides;\n  public int Sidelength;\n  public double Area;  \n  public Shape(){} \n}\n</code></pre><p>Let's give the constructor parameters and set the values of our fields to the passed in parameters:</p><pre><code>class Shape{\n  public string Type;\n  public int Sides;\n  public int Sidelength;\n  public double Area;  \n  public Shape(string type, int sides, int sidelength, double area){\n    Type = type;\n    Sides = sides;\n    Sidelength = sidelength;\n    Area = area;\n  }\n}\n</code></pre><p>Now when we create an instance of Shape, we can give it parameters using the constructor! Putting it all together looks something like this:</p><pre><code>using System;\nclass Shape{\n  public string Type;\n  public int Sides;\n  public int Sidelength;\n  public double Area;  \n  public Shape(string type, int sides, int sidelength, double area){\n    Type = type;\n    Sides = sides;\n    Sidelength = sidelength;\n    Area = area;\n  }\n}\nclass MainClass{\n  public static void Main(){\n    Shape square = new Shape(\"square\", 4, 1, 1);\n    Shape bigsquare = new Shape(\"square\", 4, 2, 4);\n    Shape triangle = new Shape(\"triangle\", 3, 3, 3.9);\n    Console.WriteLine(\"A {0} with {1} sides of length {2} has an area of {3}\", square.Type, square.Sides, square.Sidelength, square.Area);\n    Console.WriteLine(\"A {0} with {1} sides of length {2} has an area of {3}\", bigsquare.Type, bigsquare.Sides, bigsquare.Sidelength, bigsquare.Area);\n    Console.WriteLine(\"A {0} with {1} sides of length {2} has an area of {3}\", triangle.Type, triangle.Sides, triangle.Sidelength, triangle.Area);\n  }\n}\n</code></pre><p>Executing the above code will print the following:</p><p>A square with 4 sides of length 1 has an area of 1\nA square with 4 sides of length 2 has an area of 4\nA triangle with 3 sides of length 3 has an area of 3.9</p>"
                }
            ]
        },
        {
            "title": "Class Properties",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "<hr/><p>Classes can have <em>properties</em> in addition to fields and methods.  Properties allow variables to be protected and validated while keeping them simple to use.</p>"
                },
                {
                    "title": "Getters and Setters",
                    "html": "<p>Programmers in other languages often write getter and setter methods to protect their data:</p><pre><code>public class Shape {\n    private int Sides;\n\n    public int GetSides() {\n      return Sides;\n    }\n\n    public void SetSides(int value) {\n       if (value &gt; 2) Sides = value;\n    }\n}\n</code></pre>"
                },
                {
                    "title": "Properties",
                    "html": "<p>In C# we use properties with get and set <em>accessors</em>.  These accessors can protect and validate data, but we can use a property just like a variable. For example, if <code>Sides</code> and <code>SideLength</code> were properties of <code>Shape</code> then we would get and set their values just like fields:</p><pre><code>public class MainClass{\n    public static void Main(){\n        Shape shape = new Shape();\n        shape.Sides = 3;\n        shape.SideLength = 2;\n        int perimeter = shape.Sides * shape.SideLength;\n        //...\n    }\n}\n\n[Modifiers (e.g. public or static)] [Type] [Name] { get {...} set {...} }\n</code></pre><p>In the <code>get</code> block we return the value of the property. In the <code>set</code> block we receive the new value.  Inside the <code>set</code> block, the special name <code>value</code> represents the new value for the property.</p><p>Here is an example of a property named <code>Sides</code>:</p><pre><code>private int _sides = 3; // This is the \"backing field\"\npublic int Sides { \n  get {\n    return _sides;\n  }\n  set {\n    if (value &gt; 2) _sides = value;\n  }\n}\n</code></pre><p>In the example above, the property <code>Sides</code> stores its value in a private field <code>_sides</code>.  We say the property <code>Sides</code> <em>wraps</em> the field <code>_sides</code>, and we call <code>_sides</code> the <em>backing field</em>.</p>"
                },
                {
                    "title": "Calculated Properties",
                    "html": "<p>A property is not required to have a set accessor or a backing field.  For example, we can use a property to represent a calculated value like this:</p><pre><code>public int Area {\n   get { return SideLength * SideLength; }\n}\n</code></pre><p>However, a property without a set accessor cannot be assigned a value.  For the <code>Area</code> property above, we could write <code>double volume = shape.Area * 5</code>, but we could not write <code>shape.Area = 3</code>.</p>"
                },
                {
                    "title": "Default Properties",
                    "html": "<p>Sometimes we might want to create a property with minimal get and set accessors:</p><pre><code>private string _type;\npublic string Type {\n  get {\n    return _type;\n  }\n  set {\n    _type = value;\n  }\n}\n</code></pre><p>We can write this more easily with a <em>default property</em>. With default properties we do not have to create our own backing field.  We simply write:</p><pre><code>public string Type { get; set; }\n</code></pre><p>One use for a default property is to provide read-only data by making the setter private:</p><pre><code>public string Type { get; private set; }\n</code></pre>"
                }
            ]
        }
    ],
    "parts": 51
}